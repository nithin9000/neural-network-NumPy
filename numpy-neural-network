{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ee0068cc",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-07T11:18:06.405230Z",
     "iopub.status.busy": "2025-06-07T11:18:06.404965Z",
     "iopub.status.idle": "2025-06-07T11:18:07.857891Z",
     "shell.execute_reply": "2025-06-07T11:18:07.857280Z"
    },
    "papermill": {
     "duration": 1.458565,
     "end_time": "2025-06-07T11:18:07.859255",
     "exception": false,
     "start_time": "2025-06-07T11:18:06.400690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d1a7f9d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T11:18:07.864826Z",
     "iopub.status.busy": "2025-06-07T11:18:07.864517Z",
     "iopub.status.idle": "2025-06-07T11:18:10.808620Z",
     "shell.execute_reply": "2025-06-07T11:18:10.807838Z"
    },
    "papermill": {
     "duration": 2.948111,
     "end_time": "2025-06-07T11:18:10.809941",
     "exception": false,
     "start_time": "2025-06-07T11:18:07.861830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "50a16906",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T11:18:10.814593Z",
     "iopub.status.busy": "2025-06-07T11:18:10.814376Z",
     "iopub.status.idle": "2025-06-07T11:18:10.838262Z",
     "shell.execute_reply": "2025-06-07T11:18:10.837654Z"
    },
    "papermill": {
     "duration": 0.027326,
     "end_time": "2025-06-07T11:18:10.839311",
     "exception": false,
     "start_time": "2025-06-07T11:18:10.811985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "\n",
       "[5 rows x 785 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c5f9ae50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T11:18:10.843835Z",
     "iopub.status.busy": "2025-06-07T11:18:10.843645Z",
     "iopub.status.idle": "2025-06-07T11:18:11.473986Z",
     "shell.execute_reply": "2025-06-07T11:18:11.473382Z"
    },
    "papermill": {
     "duration": 0.634112,
     "end_time": "2025-06-07T11:18:11.475388",
     "exception": false,
     "start_time": "2025-06-07T11:18:10.841276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = np.array(data)\n",
    "m,n = data.shape\n",
    "np.random.shuffle(data)\n",
    "\n",
    "data_dev = data[0:1000].T\n",
    "Y_dev = data_dev[0]\n",
    "X_dev = data_dev[1:n]\n",
    "X_dev = X_dev / 255.\n",
    "\n",
    "data_train = data[1000:m].T\n",
    "Y_train = data_train[0]\n",
    "X_train = data_train[1:n]\n",
    "X_train = X_train / 255.\n",
    "_,m_train = X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4ab7a846",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T11:18:11.480487Z",
     "iopub.status.busy": "2025-06-07T11:18:11.480269Z",
     "iopub.status.idle": "2025-06-07T11:18:11.484620Z",
     "shell.execute_reply": "2025-06-07T11:18:11.484057Z"
    },
    "papermill": {
     "duration": 0.007938,
     "end_time": "2025-06-07T11:18:11.485633",
     "exception": false,
     "start_time": "2025-06-07T11:18:11.477695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 8, 4, ..., 1, 7, 9])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "23ed7d72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T11:18:11.490372Z",
     "iopub.status.busy": "2025-06-07T11:18:11.490167Z",
     "iopub.status.idle": "2025-06-07T11:18:11.497272Z",
     "shell.execute_reply": "2025-06-07T11:18:11.496796Z"
    },
    "papermill": {
     "duration": 0.010519,
     "end_time": "2025-06-07T11:18:11.498249",
     "exception": false,
     "start_time": "2025-06-07T11:18:11.487730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def  init_params():\n",
    "    w1 = np.random.rand(10,784) - 0.5\n",
    "    b1 = np.random.rand(10,1) - 0.5\n",
    "    w2 = np.random.rand(10,10) - 0.5\n",
    "    b2 = np.random.rand(10,1) - 0.5\n",
    "    return w1,b1,w2,b2\n",
    "\n",
    "def ReLu(z):\n",
    "    return np.maximum(0,z)\n",
    "def softmax(z):\n",
    "    a = np.exp(z) / sum(np.exp(z))\n",
    "    return a\n",
    "\n",
    "def forward_prop(w1,b1,w2,b2,X):\n",
    "    z1 = w1.dot(X) + b1\n",
    "    a1 = ReLu(z1)\n",
    "    z2 = w2.dot(a1) + b2\n",
    "    a2 = softmax(a1)\n",
    "    return z1,a1,z2,a2\n",
    "\n",
    "def one_hot(Y):\n",
    "    one_hot_Y = np.zeros((Y.size,Y.max()+1))\n",
    "    one_hot_Y[np.arange(Y.size),Y] = 1\n",
    "    one_hot_Y = one_hot_Y.T\n",
    "    return one_hot_Y\n",
    "\n",
    "def deriv_ReLu(z):\n",
    "    return z > 0\n",
    "\n",
    "def back_prop(z1,a1,z2,a2,w1,w2,X,Y):\n",
    "    one_hot_Y = one_hot(Y)\n",
    "    dz2 = a2-one_hot_Y\n",
    "    dw2 = 1 / m * dz2.dot(a1.T)\n",
    "    db2 = 1 / m * np.sum(dz2)\n",
    "    dz1 = w2.T.dot(dz2) * deriv_ReLu(z1)\n",
    "    dw1 = 1 / m * dz1.dot(X.T)\n",
    "    db1 = 1 / m * np.sum(dz1)\n",
    "    return dw1,db1,dw2,db2\n",
    "\n",
    "def update_params(w1,b1,w2,b2,dw1,db1,dw2,db2,alpha):\n",
    "    w1 = w1 - alpha * dw1\n",
    "    b1 = b1 - alpha * db1\n",
    "    w2 = w2 - alpha * dw2\n",
    "    b2 = b2 - alpha * db2\n",
    "    return w1,b1,w2,b2\n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cacde998",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T11:18:11.503269Z",
     "iopub.status.busy": "2025-06-07T11:18:11.502564Z",
     "iopub.status.idle": "2025-06-07T11:18:11.507856Z",
     "shell.execute_reply": "2025-06-07T11:18:11.507201Z"
    },
    "papermill": {
     "duration": 0.008684,
     "end_time": "2025-06-07T11:18:11.508820",
     "exception": false,
     "start_time": "2025-06-07T11:18:11.500136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_predictions(a2):\n",
    "    return np.argmax(a2,0)\n",
    "def get_accuracy(predictions,Y):\n",
    "    print(predictions,Y)\n",
    "    return np.sum(predictions == Y)/Y.size\n",
    "\n",
    "def gradient_descent(X,Y,alpha,iterations):\n",
    "    w1,b1,w2,b2 = init_params()\n",
    "    for i in range(iterations):\n",
    "        z1,a1,z2,a2 = forward_prop(w1,b1,w2,b2,X)\n",
    "        dw1,db1,dw2,db2 = back_prop(z1,a1,z2,a2,w1,w2,X,Y)\n",
    "        w1,b1,w2,b2 = update_params(w1,b1,w2,b2,dw1,db1,dw2,db2,alpha)\n",
    "        if(i%10 == 0):\n",
    "            print(\"Iteration: \", i )\n",
    "            \n",
    "            print(\"Accuracy: \",get_accuracy(get_predictions(a2),Y))\n",
    "    return w1,b1,w2,b2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "08fc573d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T11:18:11.513312Z",
     "iopub.status.busy": "2025-06-07T11:18:11.513109Z",
     "iopub.status.idle": "2025-06-07T11:18:41.747875Z",
     "shell.execute_reply": "2025-06-07T11:18:41.747258Z"
    },
    "papermill": {
     "duration": 30.238543,
     "end_time": "2025-06-07T11:18:41.749312",
     "exception": false,
     "start_time": "2025-06-07T11:18:11.510769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:  0\n",
      "[8 5 7 ... 6 5 7] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09278048780487805\n",
      "Iteration:  10\n",
      "[7 7 7 ... 7 7 7] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.105\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_20/4203275744.py:28: RuntimeWarning: invalid value encountered in greater\n",
      "  return z > 0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration:  20\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  30\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  40\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  50\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  60\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  70\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  80\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  90\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  100\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  110\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  120\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  130\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  140\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  150\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  160\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  170\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  180\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  190\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  200\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  210\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  220\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  230\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  240\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  250\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  260\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  270\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  280\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  290\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  300\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  310\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  320\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  330\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  340\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  350\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  360\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  370\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  380\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  390\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  400\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  410\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  420\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  430\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  440\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  450\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  460\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  470\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  480\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n",
      "Iteration:  490\n",
      "[0 0 0 ... 0 0 0] [1 8 4 ... 1 7 9]\n",
      "Accuracy:  0.09817073170731708\n"
     ]
    }
   ],
   "source": [
    "w1,b1,w2,b2 = gradient_descent(X_train,Y_train,0.10,500)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 861823,
     "sourceId": 3004,
     "sourceType": "competition"
    },
    {
     "datasetId": 7603561,
     "sourceId": 12078750,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 39.877955,
   "end_time": "2025-06-07T11:18:42.071726",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-07T11:18:02.193771",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
